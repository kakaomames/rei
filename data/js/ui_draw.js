// game.js„ÅßÂÆöÁæ©„Åï„Çå„Åü„Ç∞„É≠„Éº„Éê„É´Â§âÊï∞„Çí‰ΩøÁî®:
// ctx, WIDTH, HEIGHT, player, bullets, enemies, boss, golem, isBossPhase, 
// score, currentRebel, isGameOver, gameData, TIME_CYCLE_DURATION, timeOfDayTimer, isDay, 
// DEFENSE_STATS, shieldButton, potionButton

// --- ÊèèÁîª„É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£ ---

/**
 * „Éó„É¨„Ç§„É§„ÉºÔºàËá™Ê©üÔºâ„ÅÆÊèèÁîª
 */
function drawPlayer() {
    ctx.fillStyle = player.color;
    ctx.fillRect(player.x, player.y, player.width, player.height);

    // HP„Éê„Éº„ÅÆÊèèÁîª
    const hpRatio = player.hp / player.maxHp;
    const hpBarWidth = player.width;
    const hpBarHeight = 5;
    ctx.fillStyle = 'red';
    ctx.fillRect(player.x, player.y - 10, hpBarWidth, hpBarHeight);
    ctx.fillStyle = 'lime';
    ctx.fillRect(player.x, player.y - 10, hpBarWidth * hpRatio, hpBarHeight);
    
    // „Ç∑„Éº„É´„ÉâÁä∂ÊÖã„ÅÆÊèèÁîª
    if (player.isShielded) {
        ctx.strokeStyle = 'cyan';
        ctx.lineWidth = 3;
        ctx.beginPath();
        ctx.arc(player.x + player.width / 2, player.y + player.height / 2, player.width * 0.8, 0, 2 * Math.PI);
        ctx.stroke();
    }
    
    // „Éá„Éê„ÉïÁä∂ÊÖã„ÅÆÊèèÁîª
    drawDebuffIndicators();
}

/**
 * „Éá„Éê„Éï„Ç§„É≥„Ç∏„Ç±„Éº„Çø„Éº„ÅÆÊèèÁîª
 */
function drawDebuffIndicators() {
    let offset = 0;
    
    if (player.debuff.burning > 0) {
        ctx.fillStyle = 'orange';
        ctx.fillText(`üî• ${Math.ceil(player.debuff.burning / 60)}s`, player.x + player.width + 5, player.y + 10 + offset);
        offset += 15;
    }
    if (player.debuff.poison > 0) {
        ctx.fillStyle = 'green';
        ctx.fillText(`ü¶† ${Math.ceil(player.debuff.poison / 60)}s`, player.x + player.width + 5, player.y + 10 + offset);
        offset += 15;
    }
    if (player.debuff.frozen > 0) {
        ctx.fillStyle = 'blue';
        ctx.fillText(`‚ùÑÔ∏è ${Math.ceil(player.debuff.frozen / 60)}s`, player.x + player.width + 5, player.y + 10 + offset);
        offset += 15;
    }
}

/**
 * Âºæ„ÅÆÊèèÁîª
 */
function drawBullets() {
    bullets.forEach(b => {
        ctx.fillStyle = b.isBoss ? b.color : bulletColor;
        ctx.fillRect(b.x, b.y, b.width, b.height);
    });
}

/**
 * Êïµ„ÅÆÊèèÁîª
 */
function drawEnemies() {
    enemies.forEach(e => {
        ctx.fillStyle = e.color;
        ctx.fillRect(e.x, e.y, e.width, e.height);
        
        // Mob„ÅÆHP„Éê„Éº
        const hpRatio = e.hp / e.maxHp;
        const hpBarWidth = e.width;
        const hpBarHeight = 3;
        ctx.fillStyle = 'red';
        ctx.fillRect(e.x, e.y - 5, hpBarWidth, hpBarHeight);
        ctx.fillStyle = 'yellow';
        ctx.fillRect(e.x, e.y - 5, hpBarWidth * hpRatio, hpBarHeight);
    });
}

/**
 * „Éú„Çπ„ÅÆÊèèÁîª
 */
function drawBoss() {
    if (!boss) return;

    // ÊôÇÈñìÂ∏Ø„Å´„Çà„ÇãËÉåÊôØÂ§âÂåñ (ZOMBIE/HUSKÊà¶„ÅÆÂ†¥Âêà„ÅÆ„Åø)
    if (boss.trait === "zombie_time" || boss.trait === "no_sun_damage") {
        const timeRatio = timeOfDayTimer / TIME_CYCLE_DURATION;
        const colorVal = Math.floor(255 * timeRatio * (isDay ? 1 : 0.5));
        const bgColor = `rgb(${colorVal}, ${colorVal}, ${colorVal})`;
        ctx.fillStyle = bgColor;
        ctx.fillRect(0, 0, WIDTH, HEIGHT);
        
        // Â§™ÈôΩ/Êúà„ÅÆÊèèÁîª
        ctx.fillStyle = isDay ? 'yellow' : 'white';
        ctx.beginPath();
        ctx.arc(WIDTH - 50, 50, 20, 0, 2 * Math.PI);
        ctx.fill();
    }


    ctx.fillStyle = boss.color;
    ctx.fillRect(boss.x, boss.y, boss.width, boss.height);

    // „Éú„ÇπHP„Éê„Éº„ÅÆÊèèÁîª (ÁîªÈù¢‰∏äÈÉ®ÂÖ®‰Ωì)
    const hpRatio = boss.hp / boss.maxHp;
    ctx.fillStyle = 'darkred';
    ctx.fillRect(10, 10, WIDTH - 20, 15);
    ctx.fillStyle = 'crimson';
    ctx.fillRect(10, 10, (WIDTH - 20) * hpRatio, 15);
    
    ctx.fillStyle = 'white';
    ctx.font = '12px Arial';
    ctx.textAlign = 'center';
    ctx.fillText(`${boss.hp.toFixed(0)} / ${boss.maxHp.toFixed(0)}`, WIDTH / 2, 22);
    ctx.textAlign = 'left'; 
}

/**
 * „Ç¥„Éº„É¨„É†„ÅÆÊèèÁîª
 */
function drawGolem() {
    if (!golem) return;
    
    ctx.fillStyle = golem.color;
    ctx.fillRect(golem.x, golem.y, golem.width, golem.height);

    // „Çø„Ç§„Éû„ÉºË°®Á§∫
    ctx.fillStyle = 'white';
    ctx.font = '10px Arial';
    ctx.fillText(Math.ceil(golem.timer / 60), golem.x + golem.width / 2 - 5, golem.y - 5);
}

/**
 * „Çπ„Ç≥„Ç¢„Å®„É¨„Éô„É´ÊÉÖÂ†±„ÅÆÊèèÁîª
 */
function drawScore() {
    ctx.fillStyle = 'white';
    ctx.font = '16px Arial';
    ctx.textAlign = 'left';
    ctx.fillText(`SCORE: ${score}`, 10, HEIGHT - 10);
    ctx.fillText(`REBEL: ${currentRebel}`, WIDTH - 90, HEIGHT - 10);

    // HPË°®Á§∫
    const defenseName = DEFENSE_STATS[player.defenseLevel].name;
    const defenseReduction = DEFENSE_STATS[player.defenseLevel].reduction;
    ctx.fillText(`HP: ${player.hp.toFixed(0)} / ${player.maxHp} (${defenseName} D:${defenseReduction})`, 10, 20);

    // MobË®é‰ºê„Éï„Çß„Éº„Ç∫„ÅÆÈÄ≤Êçó
    if (isMobPhase) {
        ctx.fillText(`MOBS: ${currentKills} / ${requiredKills}`, WIDTH / 2 - 50, 20);
    }
}

// ----------------------------------------------------
// üíª UI„Ç≥„É≥„Éà„É≠„Éº„É©„Éº„ÅÆÊõ¥Êñ∞
// ----------------------------------------------------

/**
 * „Ç¥„Éº„É¨„É†„Éú„Çø„É≥„ÅÆË°®Á§∫/ÈùûË°®Á§∫„ÇíÊõ¥Êñ∞
 */
function updateGolemButtonVisibility() {
    const material = Array.from(gameData.items.values()).find(i => i.level === player.unlockedGolemLevel);
    const materialName = material ? material.name : `L${player.unlockedGolemLevel}`;
    
    golemButton.textContent = `GOLEM: ${materialName}`;
    
    if (isBossPhase && boss) {
        golemButton.classList.remove('hidden');
    } else {
        golemButton.classList.add('hidden');
    }
}

/**
 * „Éù„Éº„Ç∑„Éß„É≥„Éú„Çø„É≥„ÅÆÂú®Â∫´Ë°®Á§∫„ÇíÊõ¥Êñ∞
 */
function updatePotionButton() {
    const healPotion = gameData.potions.find(p => p.type === 'heal');
    const shieldPotion = gameData.potions.find(p => p.type === 'shield');
    
    let text = "POTION (0)";
    if (healPotion && shieldPotion) {
        const hCount = player.inventory[healPotion.id] || 0;
        const sCount = player.inventory[shieldPotion.id] || 0;
        
        // „Éí„Éº„É™„É≥„Ç∞„Éù„Éº„Ç∑„Éß„É≥„Å®„Ç∑„Éº„É´„Éâ„Éù„Éº„Ç∑„Éß„É≥„ÅÆÂêàË®à„ÇíË°®Á§∫
        text = `POTION (${hCount + sCount})`;
    }
    
    potionButton.textContent = text;
}


// ----------------------------------------------------
// üí¨ „É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫
// ----------------------------------------------------

let message = "";
let messageTimer = 0;

/**
 * ÁîªÈù¢‰∏≠Â§Æ„Å´‰∏ÄÊôÇÁöÑ„Å™„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
 * @param {string} msg - Ë°®Á§∫„Åô„Çã„É°„ÉÉ„Çª„Éº„Ç∏
 */
function drawMessage(msg) {
    message = msg;
    messageTimer = 180; // 3ÁßíÈñìË°®Á§∫
}

/**
 * „É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÊèèÁîª
 */
function drawMessageOverlay() {
    if (messageTimer > 0) {
        ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
        ctx.fillRect(0, HEIGHT / 2 - 30, WIDTH, 60);

        ctx.fillStyle = 'yellow';
        ctx.font = '24px Arial';
        ctx.textAlign = 'center';
        ctx.fillText(message, WIDTH / 2, HEIGHT / 2 + 10);

        messageTimer--;
    }
}

/**
 * „Ç≤„Éº„É†„ÇØ„É™„Ç¢ÁîªÈù¢„ÅÆÊèèÁîª
 */
function drawGameClear() {
    ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';
    ctx.fillRect(0, 0, WIDTH, HEIGHT);

    ctx.fillStyle = 'gold';
    ctx.font = '36px Arial';
    ctx.textAlign = 'center';
    ctx.fillText("‚ú® ALL REBELS CLEARED! ‚ú®", WIDTH / 2, HEIGHT / 2 - 50);
    
    ctx.font = '24px Arial';
    ctx.fillText(`ÊúÄÁµÇ„Çπ„Ç≥„Ç¢: ${score}`, WIDTH / 2, HEIGHT / 2 + 10);
    ctx.fillText(`Áç≤Âæó„Ç≥„Ç§„É≥: üí∞ ${player.coins}`, WIDTH / 2, HEIGHT / 2 + 50);

    ctx.font = '18px Arial';
    ctx.fillText("„Éõ„Éº„É†„Å´Êàª„Å£„Å¶„ÅÑ„Åæ„Åô...", WIDTH / 2, HEIGHT / 2 + 120);
}
